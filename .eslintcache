[{"F:\\my_products\\react\\todo-pro\\src\\index.js":"1","F:\\my_products\\react\\todo-pro\\src\\reportWebVitals.js":"2","F:\\my_products\\react\\todo-pro\\src\\App.js":"3","F:\\my_products\\react\\todo-pro\\src\\components\\todo\\Todo.js":"4","F:\\my_products\\react\\todo-pro\\src\\components\\notes\\Notes.js":"5","F:\\my_products\\react\\todo-pro\\src\\firebase.js":"6","F:\\my_products\\react\\todo-pro\\src\\http.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1215,"mtime":1610002635407,"results":"11","hashOfConfig":"9"},{"size":5101,"mtime":1610002629327,"results":"12","hashOfConfig":"9"},{"size":5213,"mtime":1610690116966,"results":"13","hashOfConfig":"9"},{"size":623,"mtime":1609558571770,"results":"14","hashOfConfig":"9"},{"size":1969,"mtime":1610258136258,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"7rkwb1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"F:\\my_products\\react\\todo-pro\\src\\index.js",[],["34","35"],"F:\\my_products\\react\\todo-pro\\src\\reportWebVitals.js",[],"F:\\my_products\\react\\todo-pro\\src\\App.js",[],"F:\\my_products\\react\\todo-pro\\src\\components\\todo\\Todo.js",["36","37"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./todo.scss\";\r\nimport db from \"../../firebase\";\r\nimport {\r\n  Check2,\r\n  Check2Square,\r\n  PencilSquare,\r\n  Square,\r\n  Trash,\r\n  X,\r\n} from \"react-bootstrap-icons\";\r\nimport * as http from \"../../http\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default function Todo() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [todoName, setTodoName] = useState(\"\");\r\n  const [editTodo, setEditTodo] = useState(\"\");\r\n\r\n  const addTodoHandeler = (event) => {\r\n    event.preventDefault();\r\n    if (todoName) {\r\n      const addTodoReq = {\r\n        isDone: false,\r\n        name: todoName,\r\n      };\r\n      http.addDoc(\"todos\", addTodoReq).then(\r\n        (res) => {\r\n          addTodoReq.id = res.id;\r\n          todos.unshift(addTodoReq);\r\n          setTodos([...todos]);\r\n          toast.success(res.message);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n          toast.error(error.message);\r\n        }\r\n      );\r\n      setTodoName(\"\");\r\n    }\r\n  };\r\n\r\n  const deleteHandeler = (todoItem, index) => {\r\n    let isDeleteConfirm = window.confirm(\"Want to delete?\");\r\n    if (isDeleteConfirm) {\r\n      http.deleteDoc(\"todos\", todoItem.id).then(\r\n        (res) => {\r\n          todos.splice(index, 1);\r\n          setTodos([...todos]);\r\n          toast.success(res.message);\r\n        },\r\n        (error) => {\r\n          toast.error(error.message);\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const editHandeler = (todoItem) => {\r\n    todos.map((item) => {\r\n      if (item.hasOwnProperty(\"isEditing\")) {\r\n        delete item.isEditing;\r\n      }\r\n    });\r\n    todoItem.isEditing = true;\r\n    setTodos([...todos]);\r\n    setEditTodo(todoItem.name);\r\n  };\r\n\r\n  const updateHandeler = (todoItem, event = null) => {\r\n    debugger;\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    delete todoItem.isEditing;\r\n    const updateObj = {\r\n      name: editTodo,\r\n      isDone: false,\r\n    };\r\n\r\n    http\r\n      .updateDoc(\"todos\", todoItem.id, updateObj)\r\n      .then((res) => {\r\n        todoItem.name = editTodo;\r\n        toast.success(res.message);\r\n        setTodos([...todos]);\r\n      })\r\n      .catch((error) => {\r\n        toast.error(error.message);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const closeUpdate = (todoItem) => {\r\n    delete todoItem.isEditing;\r\n    setTodos([...todos]);\r\n  };\r\n\r\n  const updateEditInp = (val) => {\r\n    setEditTodo(val);\r\n  };\r\n\r\n  useEffect(() => {\r\n    http.getAllDocs(\"todos\").then(\r\n      (data) => {\r\n        setTodos(data);\r\n      },\r\n      (error) => {\r\n        toast.error(\"Something went wrong!\");\r\n        console.log(error);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"addTodoContainer\">\r\n      <div className=\"addTodo\">\r\n        <form onSubmit={addTodoHandeler}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add Todo\"\r\n            value={todoName}\r\n            onChange={(event) => setTodoName(event.target.value)}\r\n          />\r\n          <button type=\"submit\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"35\"\r\n              height=\"35\"\r\n              fill=\"currentColor\"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n            </svg>\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <ul className=\"todoList\">\r\n        {todos.map((todo, index) => (\r\n          <li key={todo.id} className={todo.isEditing ? \"editing\" : \"\"}>\r\n            <label>\r\n              <input type=\"checkbox\" />\r\n              <Square className=\"unCheck\" size={15}></Square>\r\n              <Check2Square className=\"checked\" size={18}></Check2Square>\r\n              <span className=\"ml-5\">\r\n                {todo.isEditing ? (\r\n                  <form onSubmit={(event) => updateHandeler(todo, event)}>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"editInp\"\r\n                      autoFocus\r\n                      value={editTodo}\r\n                      onChange={(event) => updateEditInp(event.target.value)}\r\n                    />\r\n                  </form>\r\n                ) : (\r\n                  <>{todo.name}</>\r\n                )}\r\n              </span>\r\n            </label>\r\n            <div className=\"item-action\">\r\n              {todo.isEditing ? (\r\n                <>\r\n                  <Check2\r\n                    onClick={() => updateHandeler(todo)}\r\n                    size={18}\r\n                  ></Check2>\r\n                  <X size={18} onClick={() => closeUpdate(todo)}></X>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <PencilSquare\r\n                    onClick={() => editHandeler(todo)}\r\n                  ></PencilSquare>\r\n                  <Trash onClick={() => deleteHandeler(todo, index)}></Trash>\r\n                </>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","F:\\my_products\\react\\todo-pro\\src\\components\\notes\\Notes.js",["38","39","40"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./notes.scss\";\r\nimport addNewImg from \"../../assets/images/add-notes-bkg.png\";\r\nimport { ArrowLeft, Plus, Trash } from \"react-bootstrap-icons\";\r\nimport * as http from \"../../http\";\r\nimport firebase from \"firebase\";\r\nimport { toast } from \"react-toastify\";\r\nimport db from \"../../firebase\";\r\n\r\nexport default function Notes() {\r\n  const [notes, setNotes] = useState([]);\r\n  const [isNewNotes, setisNewNotes] = useState(false);\r\n  const [currentNote, setCurrentNote] = useState({});\r\n  const [addNoteForm, setAddNoteForm] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  });\r\n  const [updateId, setUpdateId] = useState(\"\");\r\n\r\n  const updateNotesContainer = () => {\r\n    setisNewNotes(!isNewNotes);\r\n  };\r\n\r\n  const onChangeHandeler = (event) => {\r\n    setAddNoteForm({ ...addNoteForm, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const clear = () => {\r\n    setAddNoteForm({\r\n      title: \"\",\r\n      description: \"\",\r\n    });\r\n    setUpdateId(\"\");\r\n  };\r\n\r\n  const addNewNotes = () => {\r\n    updateNotesContainer();\r\n    if (!addNoteForm.title && !addNoteForm.description) {\r\n      return;\r\n    }\r\n    addNoteForm.timestamp = firebase.firestore.FieldValue.serverTimestamp();\r\n    if (updateId) {\r\n      http.updateDoc(\"notes\", updateId, addNoteForm).then(\r\n        (res) => {\r\n          toast.success(res.message);\r\n          clear();\r\n        },\r\n        (err) => {\r\n          toast.error(err.message);\r\n          clear();\r\n        }\r\n      );\r\n    } else {\r\n      http.addDoc(\"notes\", addNoteForm).then(\r\n        (res) => {\r\n          toast.success(res.message);\r\n        },\r\n        (err) => {\r\n          toast.error(err.message);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const getTime = (timestamp) => {\r\n    if (!timestamp) {\r\n      return;\r\n    }\r\n    const time = new Date(timestamp.toDate());\r\n    return `${time.getDate()}/${time.getMonth() + 1}/${time.getFullYear()}`;\r\n  };\r\n\r\n  const deleteHandeler = (noteItem, index) => {\r\n    let isDeleteConfirm = window.confirm(\"Want to delete?\");\r\n    if (isDeleteConfirm) {\r\n      http.deleteDoc(\"notes\", noteItem.id).then(\r\n        (res) => {\r\n          toast.success(res.message);\r\n          console.log(res);\r\n        },\r\n        (error) => {\r\n          toast.error(error.message);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const editNote = (noteItem) => {\r\n    console.log(noteItem);\r\n    updateNotesContainer();\r\n    setUpdateId(noteItem.id);\r\n    // setCurrentNote(noteItem);\r\n    addNoteForm.title = noteItem.title || \"\";\r\n    addNoteForm.description = noteItem.description || \"\";\r\n    setAddNoteForm(addNoteForm);\r\n    console.log(addNoteForm);\r\n  };\r\n\r\n  useEffect(() => {\r\n    db.collection(\"notes\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        setNotes(\r\n          snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }))\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={notes.length == 0 ? \"notes noNotes\" : \"notes\"}>\r\n      <div className={isNewNotes ? \"notesContainer hide\" : \"notesContainer\"}>\r\n        {/* add new item start */}\r\n        <div\r\n          className=\"notesItemWrappper addnewWrapper\"\r\n          onClick={updateNotesContainer}\r\n        >\r\n          <div className=\"notesItemInner cur-pointer\">\r\n            <h4>\r\n              <Plus /> Add New\r\n            </h4>\r\n            <img src={addNewImg} alt=\"img\" className=\"addNewImg\" />\r\n          </div>\r\n        </div>\r\n        {/* add new item end */}\r\n        {notes.map((note, index) => (\r\n          <div className=\"notesItemWrappper\" key={index}>\r\n            <Trash\r\n              color=\"red\"\r\n              className=\"trash\"\r\n              onClick={() => deleteHandeler(note, index)}\r\n            ></Trash>\r\n            <div className=\"notesItemInner\" onClick={() => editNote(note)}>\r\n              {note.title ? <h4>{note.title}</h4> : \"\"}\r\n              <div className=\"noteContent\">\r\n                <p>{note.description}</p>\r\n              </div>\r\n              <p className=\"noteDate\">{getTime(note.timestamp)}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {isNewNotes && (\r\n        <div className=\"newNotesHolder\">\r\n          <div className=\"d-flex justify-content-between p-10 white-bkg align-center\">\r\n            <ArrowLeft onClick={addNewNotes} className=\"cur-pointer\" />\r\n            <strong>Add Notes</strong>\r\n            <div></div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <div className=\"form-control\">\r\n              <label>Title</label>\r\n              <input\r\n                type=\"text\"\r\n                value={addNoteForm.title}\r\n                name=\"title\"\r\n                onChange={(event) => onChangeHandeler(event)}\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label>Description</label>\r\n              <textarea\r\n                name=\"description\"\r\n                value={addNoteForm.description}\r\n                onChange={(event) => onChangeHandeler(event)}\r\n              ></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","F:\\my_products\\react\\todo-pro\\src\\firebase.js",[],"F:\\my_products\\react\\todo-pro\\src\\http.js",[],["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":61,"column":22,"nodeType":"53","messageId":"54","endLine":61,"endColumn":24},{"ruleId":"47","severity":1,"message":"55","line":13,"column":10,"nodeType":"49","messageId":"50","endLine":13,"endColumn":21},{"ruleId":"47","severity":1,"message":"56","line":13,"column":23,"nodeType":"49","messageId":"50","endLine":13,"endColumn":37},{"ruleId":"57","severity":1,"message":"58","line":113,"column":34,"nodeType":"59","messageId":"60","endLine":113,"endColumn":36},{"ruleId":"43","replacedBy":"61"},{"ruleId":"45","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'db' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'currentNote' is assigned a value but never used.","'setCurrentNote' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["63"],["64"],"no-global-assign","no-unsafe-negation"]